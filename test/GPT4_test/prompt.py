json = """{
        "content":[
                {"id": 0, "heading": "岳阳县水系连通及农村水系综合整治工程建设项目环境影响报告书", "dep": [-1], "level": 0},
                {"id": 1, "heading": "概述", "dep": [-1], "level": 1},
                {"id": 2, "heading": "分析判定相关环保政策", "dep": [-1], "level": 2},
                {"id": 3, "heading": "产业政策相符性分析", "dep": [-1], "level": 3},
                {"id": 4, "heading": "法律法规符合性分析", "dep": [-1], "level": 3},
                {"id": 5, "heading": "与相关规划符合性分析", "dep": [-1], "level": 3},
                {"id": 6, "heading": "项目环评报告书的主要结论", "dep": [12], "level": 2},
                {"id": 7, "heading": "结论与建议", "dep": [-1], "level": 1},
                {"id": 8, "heading": "项目概况", "dep": [-1], "level": 2},
                {"id": 9, "heading": "环境管理", "dep": [3], "level": 3},
                {"id": 10, "heading": "主要环保措施", "dep": [-1], "level": 2},
                {"id": 11, "heading": "环境影响经济损益分析", "dep": [-1], "level": 3},
                {"id": 12, "heading": "环评总结论", "dep": [-1], "level": 3}
        ]
}"""

#  -- paper -- 
# Q: 我想写一篇计算机视觉领域的论文，标题为《Deep Residual Learning for Image Recognition》, 大致内容为：[更深层次的神经网络更难训练。我们提出了一个残差学习框架，以简化比以前使用的网络更深的网络的训练。我们显式地将层重新表示为参考层输入的学习残差函数，而不是学习未引用的函数。我们提供了全面的经验证据，表明这些残差网络更容易优化，并且可以从显著增加的深度中获得准确性。在ImageNet数据集上，我们评估了深度高达152层的残差网络-比VGG网络深8倍，但仍然具有较低的复杂性。这些残差网络的集合在ImageNet测试集上实现了3.57%的误差。这一结果在ILSVRC 2015年的分类任务中获得了第一名。我们还分析了CIFAR-10与100和1000层。表征的深度对于许多视觉识别任务是至关重要的。仅仅由于我们非常深入的表示，我们在COCO对象检测数据集上获得了28%的相对改进。深度残差网络是我们提交ILSVRC和COCO 2015竞赛的基础，我们还赢得了ImageNet检测，ImageNet本地化，COCO检测和COCO分割任务的第一名。]。请你帮我生成具备依赖项的目录结构。
# A: 

# -- encyclopedia --
# Q: 我想写一则用于Wikipedia的Encyclopedia article，标题为《丰臣秀吉》，请你生成目录，并详细说明目录项的依赖关系。
# A: 

prompt_template = """
目录存储于json数据结构中，并用<JSON></JSON>封装，例如：
<JSON>
{
        "content":[
                {"id": 0, "heading": "岳阳县水系连通及农村水系综合整治工程建设项目环境影响报告书", "dep": [-1], "level": 0},
                {"id": 1, "heading": "概述", "dep": [-1], "level": 1},
                {"id": 2, "heading": "分析判定相关环保政策", "dep": [-1], "level": 2},
                {"id": 3, "heading": "产业政策相符性分析", "dep": [-1], "level": 3},
                {"id": 4, "heading": "法律法规符合性分析", "dep": [-1], "level": 3},
                {"id": 5, "heading": "与相关规划符合性分析", "dep": [-1], "level": 3},
                {"id": 6, "heading": "项目环评报告书的主要结论", "dep": [12], "level": 2},
                {"id": 7, "heading": "结论与建议", "dep": [-1], "level": 1},
                {"id": 8, "heading": "项目概况", "dep": [-1], "level": 2},
                {"id": 9, "heading": "环境管理", "dep": [3], "level": 3},
                {"id": 10, "heading": "主要环保措施", "dep": [-1], "level": 2},
                {"id": 11, "heading": "环境影响经济损益分析", "dep": [-1], "level": 3},
                {"id": 12, "heading": "环评总结论", "dep": [-1], "level": 3}
        ]
}
<JSON>

各个字段的含义
- "id"：表示每个目录项的唯一标识符，可以用来区别不同的目录项。
- "heading"：表示每个目录项的标题，描述了目录项的内容。
- "dep"：代表当前目录项的依赖项，这是一个数组，包含了当前目录项所依赖或关联的其他目录项的id。"-1"通常表示当前目录项是一个顶级项，也就是说它不依赖任何其他项。例如，id为6的"项目环评报告书的主要结论"这一目录项，它的dep值为[12]，表示它依赖于id为12的"环评总结论"这一目录项。
(注意：任何目录项的 dep 都不会依赖于 (id:0), 因为 (id:0) 是一个顶级目录项，表示文章的标题。)
- "level"：代表目录项的等级或深度。"0"通常表示这是一级目录，"1"表示二级目录，"2"表示三级目录，以此类推。比如"id"为0的目录项的"level"为0, 它是文本的title; "id"为1的目录项的"level"为1, 它是一级标题。这个字段可以帮助我们了解目录的层次结构。

### 目录结构规律
所有的文本都可以按目录深度来分类：
- Shallow：浅层目录结构，level 为 0~1 , 线性叙事，不包含多级目录项。。
  - Fiction、News、Opinion articlle
- Medium：多级目录结构,level 为 0~3，包含多级目录项。
  - Academic paper、Encyclopedia article
- Deep：深层目录结构 level 为 0~6，包含深度多级目录项。
  - IT: Software Development Report
  - Medicine: Clinical Study Report
  - Finance: Risk Assessment Report
  - Education: Course Evaluation Report
  - Law: Case Assessment Report
  - Management: Project Management Report
  - Manufacturing: Manufacturing Process Report

### 目录项依赖规则：
1. 在目录结构中，一个目录项可以依赖于一个或者多个其它目录项。这种依赖关系表示写作时需要参考被依赖的文本。
比如在小说中，一个情节的写作需要依赖上一个情节或者更早期的情节。又或者在多级目录文本中，一个更广泛的主题可能依赖于许多更具体的子主题的详细信息。
2. 在浅层目录中（比如小说目录），目录项通常是线性的，下一项的内容大概率会基于上一项的内容。如果存在伏笔手法，则需要基于更初期的情节或者设定。
例如:
    {"id": i-1, "heading": "A", "dep": [i-6], "level": 1},
    {"id": i, "heading": "B", "dep": [i-1], "level": 1},
    {"id": i+1, "heading": "C", "dep": [i], "level": 1},
3. 在多级或者深层目录中（比如分析文章、研究报告等），父目录项（更高级别的目录项）通常依赖于它的子目录项（更详细或者更具体的目录项）。因为在这种情况下，一个大的主题或观点被分解为多个子主题或观点，并且每个子主题或观点都会为父主题或观点提供支持。这符合总-分的写作逻辑。
例如：
    {"id": i, "heading": "A", "dep": [i+1, i+2, i+3], "level": 1},
    {"id": i+1, "heading": "A", "dep": [-1], "level": 1},
    {"id": i+2, "heading": "B", "dep": [-1], "level": 1},
    {"id": i+3, "heading": "C", "dep": [-1], "level": 1},
4. 对于文章的引言和结论部分，它们通常没有依赖，但结论可能需要读者对整个文章的内容有所了解。然而，如果结论是对前面几个关键点的总结，那么它可以视作依赖于那些关键点。
5. 目录项的 dep 都不会依赖于 (id:0), 因为 id:0 是一个顶级目录项，表示文章的标题。
6. 最后，值得注意的是，目录的依赖关系并不一定是线性的。根据文章内容的不同，某些目录项可能需要同时依赖于多个其他目录项。

Q: 我想写一本以月球为主题的科幻小说《月影之下》，请你生成小说《月影之下》的目录，并详细说明目录项的依赖关系。
A: 
### 分析：
小说属于Shallow类型的文本，level为 0~1，不包含多级目录项。
为了让情节更精彩，我将使用伏笔手法，一些情节会依赖于早期的情节或设定。
### 目录
<JSON>
{
    "content":[
        {"id": 0, "heading": "月影之下", "dep": [-1], "level": 0},
        {"id": 1, "heading": "序言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "神秘的邀请函", "dep": [-1], "level": 1},
        {"id": 3, "heading": "地球上的准备", "dep": [2], "level": 1},
        {"id": 4, "heading": "太空之旅启程", "dep": [3], "level": 1},
        {"id": 5, "heading": "宇宙中的异样", "dep": [4, 2], "level": 1},
        {"id": 6, "heading": "月亮的邀请", "dep": [5], "level": 1},
        {"id": 7, "heading": "落月的秘密", "dep": [6], "level": 1},
        {"id": 8, "heading": "月影村落", "dep": [7], "level": 1},
        {"id": 9, "heading": "月影族人", "dep": [8], "level": 1},
        {"id": 10, "heading": "神秘的传说", "dep": [9,2], "level": 1},
        {"id": 11, "heading": "月亮矿石的秘密", "dep": [10], "level": 1},
        {"id": 12, "heading": "危险的决定", "dep": [11,2], "level": 1},
        {"id": 13, "heading": "再见，地球", "dep": [12], "level": 1},
        {"id": 14, "heading": "归航中的挑战", "dep": [13,2], "level": 1},
        {"id": 15, "heading": "勇敢的牺牲", "dep": [14], "level": 1},
        {"id": 16, "heading": "安全归航", "dep": [15], "level": 1},
        {"id": 17, "heading": "回归之后", "dep": [16], "level": 1},
        {"id": 18, "heading": "新的前景", "dep": [17], "level": 1},
        {"id": 19, "heading": "解开的秘密", "dep": [18,2], "level": 1},
        {"id": 20, "heading": "结语", "dep": [-1], "level": 1}
    ]
}
</JSON>
### 说明：
1. "神秘的邀请函"(id:2)包含了故事的伏笔，这一伏笔在后面的情节中会不断展开和解释，为听众展示了未知的世界和隐藏的秘密。
2. "地球上的准备"(id:3)依赖于id为2的"神秘的邀请函"，在这一章中，主角们接收到了神秘的邀请，开始准备他们的太空旅行。
3. "宇宙中的异样"(id:5)这里的情节不只是依赖于他们已经启程，更是和最初的那份神秘邀请函有所关联，这也是为了揭示伏笔。
4. "神秘的传说"(id:10)这一章节依赖于他们已经进入月影村落和最初的神秘邀请函，传说和邀请函中的秘密有关。
5. "危险的决定"(id:12)，这一章的情节也依赖于神秘的邀请函，那份邀请函让他们面临此刻的决定，也成为了他们内心挣扎的主要原因之一。
6. "归航中的挑战"(id:14)，这个章节的情节是建立在他们即将回地球的情景之上，并且这份挑战和收到的那份神秘邀请函有关。
7. "新的前景"(id:17)和"解开的秘密"(id:18)，这两章的情节建立在归航之后，主角们处理了他们的生活并揭示了他们旅途中的神秘秘密。
8. "结语"(id:20)，总结了这次的旅程，预示了新的开始，它是无依赖的结尾，但是读者需要对全篇的主要内容有大致的了解。

Q: 我想写一则以关于特朗普在2020美国总统大选中落选的Opinion article，标题为《美国大选2020|特朗普落选的三个原因》，请你生成Opinion article的目录，并详细说明目录项的依赖关系。
A:
### 分析：
对于一篇关于特朗普落选的Opinion article，主要内容应包括对特朗普竞选失败的理由的分析。在此，我们设定每个原因（或观点）作为二级目录，三级目录为支持每个观点的详细解释或实例。

### 分析：
Opinion article属于Medium类型的文本，level通常为 0~3。在写作这篇Opinion article时，我认为最大level设置为2更为合适，即：level = 0~2
当我们撰写一篇观点文章时，主要目标是阐明和支持我们的观点。在这篇关于特朗普落选的文章中，3个原因均为大的议论点，而具体的例证和论述则为支撑这些议论点的子点。因此，每一个原因（父目录项）应该依赖于那些用来解释或支持其的详细条目（子目录项）。
### 目录
<JSON>
{
    "content":[
        {"id": 0, "heading": "美国大选2020|特朗普落选的三个原因", "dep": [-1], "level": 0},
        {"id": 1, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "第一原因：新冠疫情的处理", "dep": [3,4,5], "level": 1},
        {"id": 3, "heading": "新冠疫情的严重性", "dep": [-1], "level": 2},
        {"id": 4, "heading": "特朗普政府的应对措施和问题", "dep": [-1], "level": 2},
        {"id": 5, "heading": "公众对特朗普政府应对疫情的评价", "dep": [-1], "level": 2},
        {"id": 6, "heading": "第二原因：贸易战问题", "dep": [7,8,9], "level": 1},
        {"id": 7, "heading": "特朗普政权实施的贸易政策", "dep": [-1], "level": 2},
        {"id": 8, "heading": "贸易政策带来的影响", "dep": [-1], "level": 2},
        {"id": 9, "heading": "公众对特朗普贸易战的反应", "dep": [-1], "level": 2},
        {"id": 10, "heading": "第三原因：种族问题", "dep": [11,12,13], "level": 1},
        {"id": 11, "heading": "特朗普政府下的种族紧张", "dep": [-1], "level": 2},
        {"id": 12, "heading": "种族问题对选民的影响", "dep": [-1], "level": 2},
        {"id": 13, "heading": "美国公众对特朗普种族问题立场的评价", "dep": [-1], "level": 2},
        {"id": 14, "heading": "结论", "dep": [2,6,10], "level": 1}
    ]
}
</JSON>
### 说明：
1. "引言" (id:1)是文章的开始，没有依赖性。
2. "第一原因：新冠疫情的处理" (id:2) 是父目录项，其内容依赖于下面的三个子目录项 "新冠疫情的严重性" (id:3)， "特朗普政府的应对措施和问题" (id:4) 和 "公众对特朗普政府应对疫情的评价" (id:5)。这三个子目录项都会提供具体的例子和数据以支持 "第一原因" 的观点。写作顺序应该是先写完三个子目录项，再写"第一原因：新冠疫情的处理" (id:2)。
3. "第二原因：贸易战问题" (id:6) 是父目录项，易读性、逻辑性及论证的完整性都严重依赖于其下的三个子目录项，即"特朗普政权实施的贸易政策" (id:7)， "贸易政策带来的影响" (id:8) 和 "公众对特朗普贸易战的反应" (id:9)。这在写作联系凝练、有力的观点时尤其重要。写作顺序应该是先写完三个子目录项，再写"第二原因：贸易战问题" (id:6)。
4. "第三原因：种族问题" (id:10)，作为一个父目录项，其完整性和深度离不开以下三个子目录项："特朗普政府下的种族紧张" (id:11)， "种族问题对选民的影响" (id:12) 和 "美国公众对特朗普种族问题立场的评价" (id:13)。这个目录员要求一种层次分明的写作方式，内容的展开方式应按照子目录项的顺序来进一步支持父目录项的论述。写作顺序应该是先写完三个子目录项，再写"第三原因：种族问题" (id:10)。
5. "结论" (id:14)，作为文章的结束，需要依赖于前面所有的观点或原因，即 "第一原因：新冠疫情的处理" (id:2)， "第二原因：贸易战问题" (id:6)，和 "第三原因：种族问题" (id:10)。在结论中，作者应根据前面论述的所有观点来对问题进行总结，并加以评论或者提出见解。

"""

prompt = """ 
## 目录结构说明：
目录存储于json数据结构中，并用<JSON></JSON>封装，例如：
<JSON>
{
        "content":[
                {"id": 0, "heading": "岳阳县水系连通及农村水系综合整治工程建设项目环境影响报告书", "dep": [-1], "level": 0},
                {"id": 1, "heading": "概述", "dep": [-1], "level": 1},
                {"id": 2, "heading": "分析判定相关环保政策", "dep": [-1], "level": 2},
                {"id": 3, "heading": "产业政策相符性分析", "dep": [-1], "level": 3},
                {"id": 4, "heading": "法律法规符合性分析", "dep": [-1], "level": 3},
                {"id": 5, "heading": "与相关规划符合性分析", "dep": [-1], "level": 3},
                {"id": 6, "heading": "项目环评报告书的主要结论", "dep": [12], "level": 2},
                {"id": 7, "heading": "结论与建议", "dep": [-1], "level": 1},
                {"id": 8, "heading": "项目概况", "dep": [-1], "level": 2},
                {"id": 9, "heading": "环境管理", "dep": [3], "level": 3},
                {"id": 10, "heading": "主要环保措施", "dep": [-1], "level": 2},
                {"id": 11, "heading": "环境影响经济损益分析", "dep": [-1], "level": 3},
                {"id": 12, "heading": "环评总结论", "dep": [-1], "level": 3}
        ]
}
<JSON>

各个字段的含义
- "id"：表示每个目录项的唯一标识符，可以用来区别不同的目录项。
- "heading"：表示每个目录项的标题，描述了目录项的内容。
- "dep"：代表当前目录项的依赖项，这是一个数组，包含了当前目录项所依赖或关联的其他目录项的id。"-1"通常表示当前目录项是一个顶级项，也就是说它不依赖任何其他项。例如，id为6的"项目环评报告书的主要结论"这一目录项，它的dep值为[12]，表示它依赖于id为12的"环评总结论"这一目录项。
(注意：任何目录项的 dep 都不会依赖于 (id:0), 因为 (id:0) 是一个顶级目录项，表示文章的标题。)
- "level"：代表目录项的等级或深度。"0"通常表示这是一级目录，"1"表示二级目录，"2"表示三级目录，以此类推。比如"id"为0的目录项的"level"为0, 它是文本的title; "id"为1的目录项的"level"为1, 它是一级标题。这个字段可以帮助我们了解目录的层次结构。

### 目录结构规律
所有的文本都可以按目录深度来分类：
- Shallow：浅层目录结构，level 为 0~1 , 线性叙事，不包含多级目录项。。
  - Fiction、News、Opinion articlle
- Medium：多级目录结构,level 为 0~3，包含多级目录项。
  - Academic paper、Encyclopedia article
- Deep：深层目录结构 level 为 0~6，包含深度多级目录项。
  - IT: Software Development Report
  - Medicine: Clinical Study Report
  - Finance: Risk Assessment Report
  - Education: Course Evaluation Report
  - Law: Case Assessment Report
  - Management: Project Management Report
  - Manufacturing: Manufacturing Process Report

### 目录项依赖规则：
1. 在目录结构中，一个目录项可以依赖于一个或者多个其它目录项。这种依赖关系表示写作时需要参考被依赖的文本。
比如在小说中，一个情节的写作需要依赖上一个情节或者更早期的情节。又或者在多级目录文本中，一个更广泛的主题可能依赖于许多更具体的子主题的详细信息。
2. 在浅层目录中（比如小说目录），目录项通常是线性的，下一项的内容大概率会基于上一项的内容。如果存在伏笔手法，则需要基于更初期的情节或者设定。
例如:
    {"id": i-1, "heading": "A", "dep": [i-6], "level": 1},
    {"id": i, "heading": "B", "dep": [i-1], "level": 1},
    {"id": i+1, "heading": "C", "dep": [i], "level": 1},
3. 在多级或者深层目录中（比如分析文章、研究报告等），父目录项（更高级别的目录项）通常依赖于它的子目录项（更详细或者更具体的目录项）。因为在这种情况下，一个大的主题或观点被分解为多个子主题或观点，并且每个子主题或观点都会为父主题或观点提供支持。这符合总-分的写作逻辑。
例如：
    {"id": i, "heading": "A", "dep": [i+1, i+2, i+3], "level": 1},
    {"id": i+1, "heading": "A", "dep": [-1], "level": 1},
    {"id": i+2, "heading": "B", "dep": [-1], "level": 1},
    {"id": i+3, "heading": "C", "dep": [-1], "level": 1},
4. 对于文章的引言和结论部分，它们通常没有依赖，但结论可能需要读者对整个文章的内容有所了解。然而，如果结论是对前面几个关键点的总结，那么它可以视作依赖于那些关键点。
5. 目录项的 dep 都不会依赖于 (id:0), 因为 id:0 是一个顶级目录项，表示文章的标题。
6. 最后，值得注意的是，目录的依赖关系并不一定是线性的。根据文章内容的不同，某些目录项可能需要同时依赖于多个其他目录项。

Q: 我想写一本以月球为主题的科幻小说《月影之下》，请你生成小说《月影之下》的目录，并详细说明目录项的依赖关系。
A: 
### 分析：
小说属于Shallow类型的文本，level为 0~1，不包含多级目录项。
为了让情节更精彩，我将使用伏笔手法，一些情节会依赖于早期的情节或设定。
### 目录
<JSON>
{
    "content":[
        {"id": 0, "heading": "月影之下", "dep": [-1], "level": 0},
        {"id": 1, "heading": "序言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "神秘的邀请函", "dep": [-1], "level": 1},
        {"id": 3, "heading": "地球上的准备", "dep": [2], "level": 1},
        {"id": 4, "heading": "太空之旅启程", "dep": [3], "level": 1},
        {"id": 5, "heading": "宇宙中的异样", "dep": [4, 2], "level": 1},
        {"id": 6, "heading": "月亮的邀请", "dep": [5], "level": 1},
        {"id": 7, "heading": "落月的秘密", "dep": [6], "level": 1},
        {"id": 8, "heading": "月影村落", "dep": [7], "level": 1},
        {"id": 9, "heading": "月影族人", "dep": [8], "level": 1},
        {"id": 10, "heading": "神秘的传说", "dep": [9,2], "level": 1},
        {"id": 11, "heading": "月亮矿石的秘密", "dep": [10], "level": 1},
        {"id": 12, "heading": "危险的决定", "dep": [11,2], "level": 1},
        {"id": 13, "heading": "再见，地球", "dep": [12], "level": 1},
        {"id": 14, "heading": "归航中的挑战", "dep": [13,2], "level": 1},
        {"id": 15, "heading": "勇敢的牺牲", "dep": [14], "level": 1},
        {"id": 16, "heading": "安全归航", "dep": [15], "level": 1},
        {"id": 17, "heading": "回归之后", "dep": [16], "level": 1},
        {"id": 18, "heading": "新的前景", "dep": [17], "level": 1},
        {"id": 19, "heading": "解开的秘密", "dep": [18,2], "level": 1},
        {"id": 20, "heading": "结语", "dep": [-1], "level": 1}
    ]
}
</JSON>
### 说明：
1. "神秘的邀请函"(id:2)包含了故事的伏笔，这一伏笔在后面的情节中会不断展开和解释，为听众展示了未知的世界和隐藏的秘密。
2. "地球上的准备"(id:3)依赖于id为2的"神秘的邀请函"，在这一章中，主角们接收到了神秘的邀请，开始准备他们的太空旅行。
3. "宇宙中的异样"(id:5)这里的情节不只是依赖于他们已经启程，更是和最初的那份神秘邀请函有所关联，这也是为了揭示伏笔。
4. "神秘的传说"(id:10)这一章节依赖于他们已经进入月影村落和最初的神秘邀请函，传说和邀请函中的秘密有关。
5. "危险的决定"(id:12)，这一章的情节也依赖于神秘的邀请函，那份邀请函让他们面临此刻的决定，也成为了他们内心挣扎的主要原因之一。
6. "归航中的挑战"(id:14)，这个章节的情节是建立在他们即将回地球的情景之上，并且这份挑战和收到的那份神秘邀请函有关。
7. "新的前景"(id:17)和"解开的秘密"(id:18)，这两章的情节建立在归航之后，主角们处理了他们的生活并揭示了他们旅途中的神秘秘密。
8. "结语"(id:20)，总结了这次的旅程，预示了新的开始，它是无依赖的结尾，但是读者需要对全篇的主要内容有大致的了解。

Q: 我想写一则以关于特朗普在2020美国总统大选中落选的Opinion article，标题为《美国大选2020|特朗普落选的三个原因》，请你生成Opinion article的目录，并详细说明目录项的依赖关系。
A:
### 分析：
对于一篇关于特朗普落选的Opinion article，主要内容应包括对特朗普竞选失败的理由的分析。在此，我们设定每个原因（或观点）作为二级目录，三级目录为支持每个观点的详细解释或实例。

### 分析：
Opinion article属于Medium类型的文本，level通常为 0~3。在写作这篇Opinion article时，我认为最大level设置为2更为合适，即：level = 0~2
当我们撰写一篇观点文章时，主要目标是阐明和支持我们的观点。在这篇关于特朗普落选的文章中，3个原因均为大的议论点，而具体的例证和论述则为支撑这些议论点的子点。因此，每一个原因（父目录项）应该依赖于那些用来解释或支持其的详细条目（子目录项）。
### 目录
<JSON>
{
    "content":[
        {"id": 0, "heading": "美国大选2020|特朗普落选的三个原因", "dep": [-1], "level": 0},
        {"id": 1, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "第一原因：新冠疫情的处理", "dep": [3,4,5], "level": 1},
        {"id": 3, "heading": "新冠疫情的严重性", "dep": [-1], "level": 2},
        {"id": 4, "heading": "特朗普政府的应对措施和问题", "dep": [-1], "level": 2},
        {"id": 5, "heading": "公众对特朗普政府应对疫情的评价", "dep": [-1], "level": 2},
        {"id": 6, "heading": "第二原因：贸易战问题", "dep": [7,8,9], "level": 1},
        {"id": 7, "heading": "特朗普政权实施的贸易政策", "dep": [-1], "level": 2},
        {"id": 8, "heading": "贸易政策带来的影响", "dep": [-1], "level": 2},
        {"id": 9, "heading": "公众对特朗普贸易战的反应", "dep": [-1], "level": 2},
        {"id": 10, "heading": "第三原因：种族问题", "dep": [11,12,13], "level": 1},
        {"id": 11, "heading": "特朗普政府下的种族紧张", "dep": [-1], "level": 2},
        {"id": 12, "heading": "种族问题对选民的影响", "dep": [-1], "level": 2},
        {"id": 13, "heading": "美国公众对特朗普种族问题立场的评价", "dep": [-1], "level": 2},
        {"id": 14, "heading": "结论", "dep": [2,6,10], "level": 1}
    ]
}
</JSON>
### 说明：
1. "引言" (id:1)是文章的开始，没有依赖性。
2. "第一原因：新冠疫情的处理" (id:2) 是父目录项，其内容依赖于下面的三个子目录项 "新冠疫情的严重性" (id:3)， "特朗普政府的应对措施和问题" (id:4) 和 "公众对特朗普政府应对疫情的评价" (id:5)。这三个子目录项都会提供具体的例子和数据以支持 "第一原因" 的观点。写作顺序应该是先写完三个子目录项，再写"第一原因：新冠疫情的处理" (id:2)。
3. "第二原因：贸易战问题" (id:6) 是父目录项，易读性、逻辑性及论证的完整性都严重依赖于其下的三个子目录项，即"特朗普政权实施的贸易政策" (id:7)， "贸易政策带来的影响" (id:8) 和 "公众对特朗普贸易战的反应" (id:9)。这在写作联系凝练、有力的观点时尤其重要。写作顺序应该是先写完三个子目录项，再写"第二原因：贸易战问题" (id:6)。
4. "第三原因：种族问题" (id:10)，作为一个父目录项，其完整性和深度离不开以下三个子目录项："特朗普政府下的种族紧张" (id:11)， "种族问题对选民的影响" (id:12) 和 "美国公众对特朗普种族问题立场的评价" (id:13)。这个目录员要求一种层次分明的写作方式，内容的展开方式应按照子目录项的顺序来进一步支持父目录项的论述。写作顺序应该是先写完三个子目录项，再写"第三原因：种族问题" (id:10)。
5. "结论" (id:14)，作为文章的结束，需要依赖于前面所有的观点或原因，即 "第一原因：新冠疫情的处理" (id:2)， "第二原因：贸易战问题" (id:6)，和 "第三原因：种族问题" (id:10)。在结论中，作者应根据前面论述的所有观点来对问题进行总结，并加以评论或者提出见解。

Q: 我想写一份《阿司匹林在健康志愿者中的药代动力学和药效学研究》。请你生成目录，并详细说明目录项的依赖关系。
A:
"""

fake_history = """<HUMAN>:
目录存储于json数据结构中，例如：
{
        "content":[
                {"id": 0, "heading": "岳阳县水系连通及农村水系综合整治工程建设项目环境影响报告书", "dep": [-1], "level": 0},
                {"id": 1, "heading": "概述", "dep": [-1], "level": 1},
                {"id": 2, "heading": "分析判定相关环保政策", "dep": [-1], "level": 2},
                {"id": 3, "heading": "产业政策相符性分析", "dep": [-1], "level": 3},
                {"id": 4, "heading": "法律法规符合性分析", "dep": [-1], "level": 3},
                {"id": 5, "heading": "与相关规划符合性分析", "dep": [-1], "level": 3},
                {"id": 6, "heading": "项目环评报告书的主要结论", "dep": [12], "level": 2},
                {"id": 7, "heading": "结论与建议", "dep": [-1], "level": 1},
                {"id": 8, "heading": "项目概况", "dep": [-1], "level": 2},
                {"id": 9, "heading": "环境管理", "dep": [3], "level": 3},
                {"id": 10, "heading": "主要环保措施", "dep": [-1], "level": 2},
                {"id": 11, "heading": "环境影响经济损益分析", "dep": [-1], "level": 3},
                {"id": 12, "heading": "环评总结论", "dep": [-1], "level": 3}
        ]
}

各个字段的含义
- "id"：表示每个目录项的唯一标识符，可以用来区别不同的目录项。
- "heading"：表示每个目录项的标题，描述了目录项的内容。
- "dep"：代表当前目录项的依赖项，这是一个数组，包含了当前目录项所依赖或关联的其他目录项的id。"-1"通常表示当前目录项是一个顶级项，也就是说它不依赖任何其他项。例如，id为6的"项目环评报告书的主要结论"这一目录项，它的dep值为[12]，表示它依赖于id为12的"环评总结论"这一目录项。
(注意：任何目录项的 dep 都不会依赖于 (id:0), 因为 (id:0) 是一个顶级目录项，表示文章的标题。)
- "level"：代表目录项的等级或深度。"0"通常表示这是一级目录，"1"表示二级目录，"2"表示三级目录，以此类推。比如"id"为0的目录项的"level"为0, 它是文本的title; "id"为1的目录项的"level"为1, 它是一级标题。这个字段可以帮助我们了解目录的层次结构。

### 目录结构规律
所有的文本都可以按目录深度来分类：
- Shallow：浅层目录结构，level 为[0,1] , 线性叙事，只有1级目录项，不包含多级目录项。。
  - Fiction、News、Opinion articlle
- Medium：多级目录结构,level 为 [0,3]，包含多级目录项。
  - Academic paper、Encyclopedia article
- Deep：深层目录结构 level 为[0,6]，包含深度多级目录项。
  - IT: Software Development Report
  - Medicine: Clinical Study Report
  - Finance: Risk Assessment Report
  - Education: Course Evaluation Report
  - Law: Case Assessment Report
  - Management: Project Management Report
  - Manufacturing: Manufacturing Process Report

### 目录项依赖规则：
1. 在目录结构中，一个目录项可以依赖于一个或者多个其它目录项。这种依赖关系表示写作时需要参考被依赖的文本。
比如在小说中，一个情节的写作需要依赖上一个情节或者更早期的情节。又或者在多级目录文本中，一个更广泛的主题可能依赖于许多更具体的子主题的详细信息。
2. 在浅层目录中（比如小说目录），目录项通常是线性的，下一项的内容大概率会基于上一项的内容。如果存在伏笔手法，则需要基于更初期的情节或者设定。
例如:
    {"id": i-1, "heading": "A", "dep": [i-6], "level": 1},
    {"id": i, "heading": "B", "dep": [i-1], "level": 1},
    {"id": i+1, "heading": "C", "dep": [i], "level": 1},
3. 在多级或者深层目录中（比如分析文章、研究报告等），父目录项（更高级别的目录项）通常依赖于它的子目录项（更详细或者更具体的目录项）。因为在这种情况下，一个大的主题或观点被分解为多个子主题或观点，并且每个子主题或观点都会为父主题或观点提供支持。这符合总-分的写作逻辑。
例如：
    {"id": i, "heading": "A", "dep": [i+1, i+2, i+3], "level": 1},
    {"id": i+1, "heading": "A", "dep": [-1], "level": 1},
    {"id": i+2, "heading": "B", "dep": [-1], "level": 1},
    {"id": i+3, "heading": "C", "dep": [-1], "level": 1},
4. 对于文章的引言和结论部分，它们通常没有依赖，但结论可能需要读者对整个文章的内容有所了解。然而，如果结论是对前面几个关键点的总结，那么它可以视作依赖于那些关键点。
5. 目录项的 dep 都不会依赖于 (id:0), 因为 id:0 是一个顶级目录项，表示文章的标题。
6. 最后，值得注意的是，目录的依赖关系并不一定是线性的。根据文章内容的不同，某些目录项可能需要同时依赖于多个其他目录项。

Q: 我想写一本以月球为主题的科幻小说《月影之下》，请你生成小说《月影之下》的目录，并详细说明目录项的依赖关系。
A: 
### 分析：
小说属于Shallow类型的文本，level为[0,1]，包含1级目录项，不包含多级目录项。
为了让情节更精彩，我将使用伏笔手法，一些情节会依赖于早期的情节或设定。
### 目录
{
    "content":[
        {"id": 0, "heading": "月影之下", "dep": [-1], "level": 0},
        {"id": 1, "heading": "序言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "神秘的邀请函", "dep": [-1], "level": 1},
        {"id": 3, "heading": "地球上的准备", "dep": [2], "level": 1},
        {"id": 4, "heading": "太空之旅启程", "dep": [3], "level": 1},
        {"id": 5, "heading": "宇宙中的异样", "dep": [4, 2], "level": 1},
        {"id": 6, "heading": "月亮的邀请", "dep": [5], "level": 1},
        {"id": 7, "heading": "落月的秘密", "dep": [6], "level": 1},
        {"id": 8, "heading": "月影村落", "dep": [7], "level": 1},
        {"id": 9, "heading": "月影族人", "dep": [8], "level": 1},
        {"id": 10, "heading": "神秘的传说", "dep": [9,2], "level": 1},
        {"id": 11, "heading": "月亮矿石的秘密", "dep": [10], "level": 1},
        {"id": 12, "heading": "危险的决定", "dep": [11,2], "level": 1},
        {"id": 13, "heading": "再见，地球", "dep": [12], "level": 1},
        {"id": 14, "heading": "归航中的挑战", "dep": [13,2], "level": 1},
        {"id": 15, "heading": "勇敢的牺牲", "dep": [14], "level": 1},
        {"id": 16, "heading": "安全归航", "dep": [15], "level": 1},
        {"id": 17, "heading": "回归之后", "dep": [16], "level": 1},
        {"id": 18, "heading": "新的前景", "dep": [17], "level": 1},
        {"id": 19, "heading": "解开的秘密", "dep": [18,2], "level": 1},
        {"id": 20, "heading": "结语", "dep": [-1], "level": 1}
    ]
}
### 说明：
1. "神秘的邀请函"(id:2)包含了故事的伏笔，这一伏笔在后面的情节中会不断展开和解释，为听众展示了未知的世界和隐藏的秘密。
2. "地球上的准备"(id:3)依赖于id为2的"神秘的邀请函"，在这一章中，主角们接收到了神秘的邀请，开始准备他们的太空旅行。
3. "宇宙中的异样"(id:5)这里的情节不只是依赖于他们已经启程，更是和最初的那份神秘邀请函有所关联，这也是为了揭示伏笔。
4. "神秘的传说"(id:10)这一章节依赖于他们已经进入月影村落和最初的神秘邀请函，传说和邀请函中的秘密有关。
5. "危险的决定"(id:12)，这一章的情节也依赖于神秘的邀请函，那份邀请函让他们面临此刻的决定，也成为了他们内心挣扎的主要原因之一。
6. "归航中的挑战"(id:14)，这个章节的情节是建立在他们即将回地球的情景之上，并且这份挑战和收到的那份神秘邀请函有关。
7. "新的前景"(id:17)和"解开的秘密"(id:18)，这两章的情节建立在归航之后，主角们处理了他们的生活并揭示了他们旅途中的神秘秘密。
8. "结语"(id:20)，总结了这次的旅程，预示了新的开始，它是无依赖的结尾，但是读者需要对全篇的主要内容有大致的了解。


Q: 我现在想写一则以关于特朗普在2020美国总统大选中落选的Opinion article，标题为《美国大选2020|特朗普落选的三个原因》，请你生成Opinion article的目录，并详细说明目录项的依赖关系。
A:
---
<ASSISTANT>:
### 分析：
对于一篇关于特朗普落选的Opinion article，主要内容应包括对特朗普竞选失败的理由的分析。在此，我们设定每个原因（或观点）作为二级目录，三级目录为支持每个观点的详细解释或实例。

### 目录
{
    "content":[
        {"id": 0, "heading": "美国大选2020|特朗普落选的三个原因", "dep": [-1], "level": 0},
        {"id": 1, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "第一原因：新冠疫情的处理", "dep": [-1], "level": 1},
        {"id": 3, "heading": "新冠疫情的严重性", "dep": [2], "level": 2},
        {"id": 4, "heading": "特朗普政府的应对措施和问题", "dep": [2], "level": 2},
        {"id": 5, "heading": "公众对特朗普政府应对疫情的评价", "dep": [2], "level": 2},
        {"id": 6, "heading": "第二原因：贸易战问题", "dep": [-1], "level": 1},
        {"id": 7, "heading": "特朗普政权实施的贸易政策", "dep": [6], "level": 2},
        {"id": 8, "heading": "贸易政策带来的影响", "dep": [6], "level": 2},
        {"id": 9, "heading": "公众对特朗普贸易战的反应", "dep": [6], "level": 2},
        {"id": 10, "heading": "第三原因：种族问题", "dep": [-1], "level": 1},
        {"id": 11, "heading": "特朗普政府下的种族紧张", "dep": [10], "level": 2},
        {"id": 12, "heading": "种族问题对选民的影响", "dep": [10], "level": 2},
        {"id": 13, "heading": "美国公众对特朗普种族问题立场的评价", "dep": [10], "level": 2},
        {"id": 14, "heading": "结论", "dep": [-1], "level": 1}
    ]
}
### 说明：
1. "引言" (id:1) 是文章的开头，对文章进行简要介绍，没有依赖。
2. "新冠疫情的严重性" (id:3)、"特朗普政府的应对措施和问题" (id:4) 和 "公众对特朗普政府应对疫情的评价" (id:5) 都是 "第一原因：新冠疫情的处理" (id:2) 的下级目录，即这三个小标题都是用来支持 "新冠疫情的处理" 这一原因的。
3. 同样，"特朗普政权实施的贸易政策" (id:7)、"贸易政策带来的影响" (id:8) 和 "公众对特朗普贸易战的反应" (id:9) 都是 "第二原因：贸易战问题" (id:6) 的下级目录，即这三个小标题都是用来支持 "贸易战问题" 这一原因的。
4. "特朗普政府下的种族紧张" (id:11)、"种族问题对选民的影响" (id:12) 和 "美国公众对特朗普种族问题立场的评价" (id:13) 都是 " 第三原因：种族问题" (id:10) 的下级目录，即这三个小标题都是用来支持 "种族问题" 这一原因的。
5. "结论" (id:14) 是文章的结尾，总结全文，提出观点，没有依赖。
---
<HUMAN>: 
Q: 不错，但是你要注意到。你这次生成的目录结构深度大于1，说明这是一个多级目录。
不同于小说这样的目录结构为1，线性叙事为主的浅层目录，在多级目录中，应该是父目录项依赖于子目录项的内容，即：总-分结构。具体来说，应该是这样：
    {"id": 10, "heading": "第三原因：种族问题", "dep": [11,12,13], "level": 1},
    {"id": 11, "heading": "特朗普政府下的种族紧张", "dep": [-1], "level": 2},
    {"id": 12, "heading": "种族问题对选民的影响", "dep": [-1], "level": 2},
    {"id": 13, "heading": "美国公众对特朗普种族问题立场的评价", "dep": [-1], "level": 2},
你觉得呢？
A: 
---
<ASSISTANT>:
非常正确，我的回答确实有误。在多级目录中，父目录项应该依赖于子目录项的内容。感谢你的指正。这反映了一种逻辑，即我们在理解一个更大的主题或概念时，需要理解它的各个部分或子主题。你提供的关于"第三原因：种族问题"与它的子目录项的依赖关系就是一个很好的例子。
---
<HUMAN>:
Q: 请你改写目录的dep，适应这条规则，并重新给出`分析`、`目录`和`原因`
A: 
---
<ASSISTANT>:
---
### 分析：
当我们撰写一篇观点文章时，主要目标是阐明和支持我们的观点。在这篇关于特朗普落选的文章中，3个原因均为大的议论点，而具体的例证和论述则为支撑这些议论点的子点。因此，每一个原因（父目录项）应该依赖于那些用来解释或支持其的详细条目（子目录项）。
### 目录
{
    "content":[
        {"id": 0, "heading": "美国大选2020|特朗普落选的三个原因", "dep": [-1], "level": 0},
        {"id": 1, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 2, "heading": "第一原因：新冠疫情的处理", "dep": [3,4,5], "level": 1},
        {"id": 3, "heading": "新冠疫情的严重性", "dep": [-1], "level": 2},
        {"id": 4, "heading": "特朗普政府的应对措施和问题", "dep": [-1], "level": 2},
        {"id": 5, "heading": "公众对特朗普政府应对疫情的评价", "dep": [-1], "level": 2},
        {"id": 6, "heading": "第二原因：贸易战问题", "dep": [7,8,9], "level": 1},
        {"id": 7, "heading": "特朗普政权实施的贸易政策", "dep": [-1], "level": 2},
        {"id": 8, "heading": "贸易政策带来的影响", "dep": [-1], "level": 2},
        {"id": 9, "heading": "公众对特朗普贸易战的反应", "dep": [-1], "level": 2},
        {"id": 10, "heading": "第三原因：种族问题", "dep": [11,12,13], "level": 1},
        {"id": 11, "heading": "特朗普政府下的种族紧张", "dep": [-1], "level": 2},
        {"id": 12, "heading": "种族问题对选民的影响", "dep": [-1], "level": 2},
        {"id": 13, "heading": "美国公众对特朗普种族问题立场的评价", "dep": [-1], "level": 2},
        {"id": 14, "heading": "结论", "dep": [2,6,10], "level": 1}
    ]
}
### 说明：
根据你的反馈，我更改了目录的依赖关系以符合规则。

1. "引言" (id:1)是文章的开始，没有依赖性。
2. "第一原因：新冠疫情的处理" (id:2) 是父目录项，其内容依赖于下面的三个子目录项 "新冠疫情的严重性" (id:3)， "特朗普政府的应对措施和问题" (id:4) 和 "公众对特朗普政府应对疫情的评价" (id:5)。这三个子目录项都会提供具体的例子和数据以支持 "第一原因" 的观点。写作顺序应该是先写完三个子目录项，再写"第一原因：新冠疫情的处理" (id:2)。
3. "第二原因：贸易战问题" (id:6) 是父目录项，易读性、逻辑性及论证的完整性都严重依赖于其下的三个子目录项，即"特朗普政权实施的贸易政策" (id:7)， "贸易政策带来的影响" (id:8) 和 "公众对特朗普贸易战的反应" (id:9)。这在写作联系凝练、有力的观点时尤其重要。写作顺序应该是先写完三个子目录项，再写"第二原因：贸易战问题" (id:6)。
4. "第三原因：种族问题" (id:10)，作为一个父目录项，其完整性和深度离不开以下三个子目录项："特朗普政府下的种族紧张" (id:11)， "种族问题对选民的影响" (id:12) 和 "美国公众对特朗普种族问题立场的评价" (id:13)。这个目录员要求一种层次分明的写作方式，内容的展开方式应按照子目录项的顺序来进一步支持父目录项的论述。写作顺序应该是先写完三个子目录项，再写"第三原因：种族问题" (id:10)。
5. "结论" (id:14)，作为文章的结束，需要依赖于前面所有的观点或原因，即 "第一原因：新冠疫情的处理" (id:2)， "第二原因：贸易战问题" (id:6)，和 "第三原因：种族问题" (id:10)。在结论中，作者应根据前面论述的所有观点来对问题进行总结，并加以评论或者提出见解。
这样，顶层的目录项依赖于更深层次的目录项，反映了文章的主要结构。
---
<Human>:
Q: 不错，能帮我把这条规则明确一下吗？这样我就不用每一次都逐步指出并修正了
A:
"""


fake_result = """
### 分析：
阿司匹林在健康志愿者中的药代动力学和药效学研究，这是一篇科研论文，所属类型应该是Medium，level通常为[0,3]。然而，考虑到药代动力学和药效学研究可能需要更详细的说明，我们采用最大层级为3的目录结构，即level=[0,4]。
这篇论文的主题是研究阿司匹林在健康志愿者体内的药代动力学和药效学行为。其实验内容会包括实验设计、测试方法、数据收集和分析等步骤。在这种情况下，应当严格按照实验的步骤来组织论文结构，由总到分，层层递进。父目录项（更广泛的主题）应依赖于子目录项（更详细或具体的信息）。

### 目录
<JSON>
{
    "content":[
        {"id": 0, "heading": "阿司匹林在健康志愿者中的药代动力学和药效学研究", "dep": [-1], "level": 0},
        {"id": 1, "heading": "摘要", "dep": [-1], "level": 1},
        {"id": 2, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 3, "heading": "材料与方法", "dep": [4,5,6], "level": 1},
        {"id": 4, "heading": "试验设计", "dep": [-1], "level": 2},
        {"id": 5, "heading": "试验材料", "dep": [-1], "level": 2},
        {"id": 6, "heading": "试验方法", "dep": [-1], "level": 2},
        {"id": 7, "heading": "结果", "dep": [8,9,10], "level": 1},
        {"id": 8, "heading": "药代动力学结果", "dep": [-1], "level": 2},
        {"id": 9, "heading": "药效学结果", "dep": [-1], "level": 2},
        {"id": 10, "heading": "副作用和安全性结果","dep": [-1], "level": 2},
        {"id": 11, "heading": "讨论", "dep": [7], "level": 1},
        {"id": 12, "heading": "结论", "dep": [7, 11], "level": 1},
        {"id": 13, "heading": "致谢", "dep": [-1], "level": 1},
        {"id": 14, "heading": "引用文献", "dep": [-1], "level": 1}
    ]
}
</JSON>
### 说明：
1. “摘要”（id:1） 和“引言”（id:2），作为论文的开头，不需要依赖其他部分。
2. "材料与方法"（id:3）这一大章节依赖于其子章节"试验设计"（id:4），"试验材料"（id:5）和"试验方法"（id:6）。这三个子章节的内容为“试验设计”的具体内容。
3. "结果"（id:7）是一个父目录项，依赖于"药代动力学结果"（id:8）,"药效学结果"（id:9）和"副作用和安全性结果"（id:10）这三个子目录项。
4. "讨论"部分（id:11）依赖于“结果”部分（id:7），因为在"讨论"部分需要对"结果"部分做出详细解释和讨论。
5. "结论"（id:12）这个部分则依赖于"结果"（id:7）和"讨论"（id:11）。结论是对研究的最终总结，需要对结果和讨论进行总结。
6. "致谢"（id:13）和"引用文献"（id:14）这两部分不需要依赖于其他部分。
"""

fake_json_str = """
{
    "content":[
        {"id": 0, "heading": "阿司匹林在健康志愿者中的药代动力学和药效学研究", "dep": [-1], "level": 0},
        {"id": 1, "heading": "摘要", "dep": [-1], "level": 1},
        {"id": 2, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 3, "heading": "材料与方法", "dep": [4,5,6], "level": 1},
        {"id": 4, "heading": "试验设计", "dep": [-1], "level": 2},
        {"id": 5, "heading": "试验材料", "dep": [-1], "level": 2},
        {"id": 6, "heading": "试验方法", "dep": [-1], "level": 2},
        {"id": 7, "heading": "结果", "dep": [8,9,10], "level": 1},
        {"id": 8, "heading": "药代动力学结果", "dep": [-1], "level": 2},
        {"id": 9, "heading": "药效学结果", "dep": [-1], "level": 2},
        {"id": 10, "heading": "副作用和安全性结果","dep": [-1], "level": 2},
        {"id": 11, "heading": "讨论", "dep": [7], "level": 1},
        {"id": 12, "heading": "结论", "dep": [7, 11], "level": 1},
        {"id": 13, "heading": "致谢", "dep": [-1], "level": 1},
        {"id": 14, "heading": "引用文献", "dep": [-1], "level": 1}
    ]
}
"""

fake_digest = """从摘要到React组件设计部分的内容总结如下:
本技术报告概述了使用JavaSpring和React技术联合开发云计算平台的方法。报告首先介绍了JavaSpring和React的基础知识及其结合的优势，然后分析了用户需求、系统需求和功能需求，包括数据处理能力、用户界面友好性、扩展性、安全性和可靠性。接着，报告详细讨论了系统架构设计，包括微服务架构、前端后端架构、数据库架构和部署策略。特别指出了Java Spring框架在服务发现、负载均衡、熔断降级和服务网关方面的应用，以及React在组件设计、状态管理和生命周期方法上的重要性。
"""

fake_content = """
{
    "content":[
        {"id": 0, "heading": "基于JavaSprint与React的云计算平台开发技术报告", "dep": [-1], "level": 0},
        {"id": 1, "heading": "摘要", "dep": [-1], "level": 1},
        {"id": 2, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 3, "heading": "需求分析", "dep": [4,5,6], "level": 1},
        {"id": 4, "heading": "用户需求分析", "dep": [-1], "level": 2},
        {"id": 5, "heading": "系统需求分析", "dep": [-1], "level": 2},
        {"id": 6, "heading": "功能需求分析", "dep": [-1], "level": 2},
        {"id": 7, "heading": "系统设计", "dep": [8,9,10,11], "level": 1},
        {"id": 8, "heading": "系统架构设计", "dep": [-1], "level": 2},
        {"id": 9, "heading": "JavaSprint框架应用设计", "dep": [-1], "level": 2},
        {"id": 10, "heading": "React组件设计", "dep": [-1], "level": 2},
        {"id": 11, "heading": "数据库设计", "dep": [-1], "level": 2},
        {"id": 12, "heading": "系统实现", "dep": [13,14,15], "level": 1},
        {"id": 13, "heading": "后端实现", "dep": [-1], "level": 2},
        {"id": 14, "heading": "前端实现", "dep": [-1], "level": 2},
        {"id": 15, "heading": "数据库实现", "dep": [-1], "level": 2},
        {"id": 16, "heading": "系统测试", "dep": [17,18,19], "level": 1},
        {"id": 17, "heading": "集成测试", "dep": [-1], "level": 2},
        {"id": 18, "heading": "性能测试", "dep": [-1], "level": 2},
        {"id": 19, "heading": "用户验收测试", "dep": [-1], "level": 2},
        {"id": 20, "heading": "总结与展望", "dep": [7,12,16], "level": 1}
    ]
}
"""

fake_text = """
## 数据库设计

在开发基于JavaSprint和React的云计算平台时，有效的数据库设计至关重要。以下为该平台的数据库设计内容：

一、**数据库选择**

我们选择MySQL作为主要的关系数据库管理系统(RDBMS)，由于它的高度灵活性以及兼容性，同时考虑到了成本问题。

二、**数据库架构**

我们的数据库架构被划分为三个主要部分：用户，云服务和交易。

- 用户：存储用户信息的表包括用户ID、用户名、密码、电子邮件和角色（用户或管理员）。

- 云服务：这部分将包含与我们提供的云计算服务相关的所有内容。将包含服务ID，服务类型，服务描述，服务成本以及其他相关信息。

- 交易：交易部分将连接用户和云服务部分，用户租用云计算资源将作为交易记录，包含交易ID，用户ID，服务ID，交易时间以及交易价格。

三、**数据库规范化**

为了确保数据库的有效性和准确性，我们采取了数据库规范化的方法。这涉及消除冗余数据，以及在新数据添加到数据库时维持逻辑一致性。

四、**安全性**

我们为数据库实施了一系列安全措施，这包括但不限于: 密码哈希（以防止密码被盗用），在数据库级别上的访问控制，以及防止SQL注入的安全措施。

五、**易用性**

为了方便开发团队，我们使用了ORM（对象关系映射）工具，如Hibernate，来简化数据库操作。同时，我们也采用了JPA（Java持久化API）规范，以实现数据库的简单易用性和可移植性。

六、**扩展性**

考虑到云计算平台可能会快速扩展，我们设计的数据库具有良好的扩展性。可以轻松添加新表，同时不会对现有数据产生影响。

以上，就是我们基于JavaSprint和React的云计算平台的数据库设计。
"""

fake_history2 = """<role>
你是一名写作专家, 正在写作<基于JavaSprint与React的云计算平台开发技术报告>
digest 是你迄今为止所写的内容的总结。
text 是目录项'数据库设计'的正文。
</role>
<rule>
digest 为目录项(0~i)的内容摘要。
text 是 第(i+1)个目录项的的正文。
请你总结text(i+1)的重点信息，并融入到digest(0~i)中，形成新的digest(0~i+1)。在此过程中，应避免直接复制前面的内容，而是通过重新组织来提炼信息，确保摘要的最终长度相对稳定，且随着添加的内容逐渐丰富。
</rule>
<content>
{
    "content":[
        {"id": 0, "heading": "基于JavaSprint与React的云计算平台开发技术报告", "dep": [-1], "level": 0},
        {"id": 1, "heading": "摘要", "dep": [-1], "level": 1},
        {"id": 2, "heading": "引言", "dep": [-1], "level": 1},
        {"id": 3, "heading": "需求分析", "dep": [4,5,6], "level": 1},
        {"id": 4, "heading": "用户需求分析", "dep": [-1], "level": 2},
        {"id": 5, "heading": "系统需求分析", "dep": [-1], "level": 2},
        {"id": 6, "heading": "功能需求分析", "dep": [-1], "level": 2},
        {"id": 7, "heading": "系统设计", "dep": [8,9,10,11], "level": 1},
        {"id": 8, "heading": "系统架构设计", "dep": [-1], "level": 2},
        {"id": 9, "heading": "JavaSprint框架应用设计", "dep": [-1], "level": 2},
        {"id": 10, "heading": "React组件设计", "dep": [-1], "level": 2},
        {"id": 11, "heading": "数据库设计", "dep": [-1], "level": 2},
        {"id": 12, "heading": "系统实现", "dep": [13,14,15], "level": 1},
        {"id": 13, "heading": "后端实现", "dep": [-1], "level": 2},
        {"id": 14, "heading": "前端实现", "dep": [-1], "level": 2},
        {"id": 15, "heading": "数据库实现", "dep": [-1], "level": 2},
        {"id": 16, "heading": "系统测试", "dep": [17,18,19], "level": 1},
        {"id": 17, "heading": "集成测试", "dep": [-1], "level": 2},
        {"id": 18, "heading": "性能测试", "dep": [-1], "level": 2},
        {"id": 19, "heading": "用户验收测试", "dep": [-1], "level": 2},
        {"id": 20, "heading": "总结与展望", "dep": [7,12,16], "level": 1}
    ]
}
说明：
1. "需求分析" (id:3) 是一个父目录项，该部分的内容主要是依赖于 "用户需求分析" (id:4)， "系统需求分析" (id:5)，和 "功能需求分析" (id:6) 这三个子目录项。这三个子目录项为 "需求分析" 提供了详尽的需求信息，以供技术人员进行后续开发。
2. "系统设计" (id:7) 这个父目录项，和它下面的四个子目录项，即 "系统架构设计" (id:8)， "JavaSprint框架应用设计" (id:9)， "React组件设计"(id:10) 和 "数据库设计" (id:11) 有着强烈的依赖关系，这四个部分完成了整个系统的设计工作。
3. "系统实现" (id:12) 是基于系统设计和需求分析的实现，该部分的完整性是依赖于 "后端实现" (id:13)， "前端实现" (id:14)，和 "数据库实现" (id:15) 的。
4. "系统测试" (id:16) 部分，包含了对系统实现的全面测试，这个部分的内容依赖于 "集成测试" (id:17)， "性能测试"(id:18) 和 "用户验收测试" (id:19)。
5. "总结与展望" (id:20) 总结了前面的工作内容并对未来进行展望，它依赖了 "系统设计" (id:7)，"系统实现" (id:12)，和 "系统测试" (id:16)，它们是项目工作的关键环节。

</content>
<text>
## 数据库设计

在开发基于JavaSprint和React的云计算平台时，有效的数据库设计至关重要。以下为该平台的数据库设计内容：

一、**数据库选择**

我们选择MySQL作为主要的关系数据库管理系统(RDBMS)，由于它的高度灵活性以及兼容性，同时考虑到了成本问题。

二、**数据库架构**

我们的数据库架构被划分为三个主要部分：用户，云服务和交易。

- 用户：存储用户信息的表包括用户ID、用户名、密码、电子邮件和角色（用户或管理员）。

- 云服务：这部分将包含与我们提供的云计算服务相关的所有内容。将包含服务ID，服务类型，服务描述，服务成本以及其他相关信息。

- 交易：交易部分将连接用户和云服务部分，用户租用云计算资源将作为交易记录，包含交易ID，用户ID，服务ID，交易时间以及交易价格。

三、**数据库规范化**

为了确保数据库的有效性和准确性，我们采取了数据库规范化的方法。这涉及消除冗余数据，以及在新数据添加到数据库时维持逻辑一致性。

四、**安全性**

我们为数据库实施了一系列安全措施，这包括但不限于: 密码哈希（以防止密码被盗用），在数据库级别上的访问控制，以及防止SQL注入的安全措施。

五、**易用性**

为了方便开发团队，我们使用了ORM（对象关系映射）工具，如Hibernate，来简化数据库操作。同时，我们也采用了JPA（Java持久化API）规范，以实现数据库的简单易用性和可移植性。

六、**扩展性**

考虑到云计算平台可能会快速扩展，我们设计的数据库具有良好的扩展性。可以轻松添加新表，同时不会对现有数据产生影响。

以上，就是我们基于JavaSprint和React的云计算平台的数据库设计。
</text>
<digest>
从摘要到React组件设计部分的内容总结如下:
本技术报告概述了使用JavaSpring和React技术联合开发云计算平台的方法。报告首先介绍了JavaSpring和React的基础知识及其结合的优势，然后分析了用户需求、系统需求和功能需求，包括数据处理能力、用户界面友好性、扩展性、安全性和可靠性。接着，报告详细讨论了系统架构设计，包括微服务架构、前端后端架构、数据库架构和部署策略。特别指出了Java Spring框架在服务发现、负载均衡、熔断降级和服务网关方面的应用，以及React在组件设计、状态管理和生命周期方法上的重要性。
</digest>
<task>
Q: 请你根据digest和text，更新digest。
A: 
报告总结了基于JavaSpring和React开发云计算平台的过程，包括从用户需求、系统和功能需求的分析，到系统架构设计，其中详细叙述了Java Spring框架和React在这个过程中的关键角色。在数据库设计部分，我们选择了MySQL作为主要的数据库管理系统，并且布局了一个分为用户、云服务、交易三个主要部分的数据库架构。为了保证数据库的准确性和安全性，我们进行了数据库规范化，并实施了一系列的安全措施，如密码哈希和防止SQL注入。另外，我们还使用了ORM工具，如Hibernate，以及采用了JPA规范，以实现数据库的简易使用和可迁移性。最后，我们的数据库设计留有足够的扩展性，以适应云计算平台快速扩展的需求。
"""

